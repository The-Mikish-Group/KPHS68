@using KPHS68.Helpers;
@using System.IO;
@using SixLabors.ImageSharp;
@using System.Linq;

<!-- Shared Gallery.cshtml -->
@{
    Layout = "_Layout";
}

@{
    // Galleries Folder Name
    string galleriesFolder = "Gallery";

    // Function to get image dimensions
    Size GetImageDimensions(string imagePath)
    {
        using (var image = Image.Load(imagePath))
        {
            return new Size(image.Width, image.Height);
        }
    }
   
    // Get the folders for the menu links
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString() ?? "Shared";
    var galleryFolder = currentController
    .Replace("slide", "", StringComparison.OrdinalIgnoreCase)
    .Replace("combo", "", StringComparison.OrdinalIgnoreCase);

    var folders = Directory.GetDirectories(System.IO.Path.Combine(Directory.GetCurrentDirectory(), $"wwwroot/{galleriesFolder}/{galleryFolder}"))
    .Where(folder => !System.IO.Path.GetFileName(folder).StartsWith("_"))
    .Select(folder => System.IO.Path.GetFileName(folder))
    .ToList();

    // Get the Gallery files for display
    var imagefolder = ViewData["ViewName"]?.ToString() ?? ViewContext.RouteData.Values["action"]?.ToString() ?? "";
    var currentImageFolder = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", galleriesFolder, galleryFolder, imagefolder);

    // Get the Gallery files for display
    var files = Directory.GetFiles(currentImageFolder, "*.*")
    .Where(file =>
        !System.IO.Path.GetFileName(file).StartsWith("background", StringComparison.OrdinalIgnoreCase) &&
        !System.IO.Path.GetFileName(file).EndsWith("_thumb.jpg", StringComparison.OrdinalIgnoreCase) &&
        (System.IO.Path.GetExtension(file).Equals(".png", StringComparison.OrdinalIgnoreCase) ||
         System.IO.Path.GetExtension(file).Equals(".jpg", StringComparison.OrdinalIgnoreCase) ||
         System.IO.Path.GetExtension(file).Equals(".gif", StringComparison.OrdinalIgnoreCase) ||
         System.IO.Path.GetExtension(file).Equals(".svg", StringComparison.OrdinalIgnoreCase) ||
         System.IO.Path.GetExtension(file).Equals(".webp", StringComparison.OrdinalIgnoreCase)))
    .Select(file =>
    {
        var imagePath = $"~/{System.IO.Path.Combine(galleriesFolder, galleryFolder, imagefolder, System.IO.Path.GetFileName(file)).Replace("\\", "/")}";
        var dimensions = GetImageDimensions(file);
        return new { ImagePath = imagePath, Dimensions = dimensions, };
    })
    .OrderBy(entry => entry.Dimensions.Height)
    .ThenBy(entry => entry.Dimensions.Width)
    .Select(entry => $"{entry.ImagePath}")
    .ToList();

    // Create thumbnail only if it doesn't exist
    var thumbnailService = new ThumbnailService();

    int thumbnailWidth = 1280;
    int thumbnailHeight = 960;

    foreach (var file in files)
    {
        var filename = System.IO.Path.Combine(System.IO.Path.GetFileNameWithoutExtension(file)) + "_thumb.jpg";
        thumbnailService.CreateOrRetrieveThumbnail(file, filename, currentImageFolder, thumbnailWidth, thumbnailHeight);
    }

    // Get the backgroundImage path
    string backgroundImage = $"{galleriesFolder}/{galleryFolder}/{imagefolder}/background.webp"; // default
    string[] extensions = { ".jpg", ".png", ".webp", ".svg", };
    foreach (var extension in extensions)
    {
        var bgPath = $"{galleriesFolder}/{galleryFolder}/{imagefolder}/background{extension}";
        if (System.IO.File.Exists(System.IO.Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", bgPath)))
        {
            backgroundImage = bgPath;
            break;
        }
    }

    // Gallery type (used in html heading display)
    var galleryType = currentController.Contains("slide", StringComparison.OrdinalIgnoreCase)
        ? "Slideshows"
        : "Galleries";
    galleryType ??= "Galleries"; // Set default if null

    // Gallery type (used in html heading display)
    galleryType = currentController.Contains("combo", StringComparison.OrdinalIgnoreCase)
        ? "Combos"
        : galleryType;
    galleryType ??= "Galleries"; // Set default if null

    // Target View (Everything currently targets Gallery)
    var targetView = currentController.Contains("slide", StringComparison.OrdinalIgnoreCase)
        ? "Gallery" // send someplace else like Slideshow.cshtml
        : "Gallery";
    targetView ??= "Gallery"; // Set default if null
}

<!-- Function to create a thumbnail -->
@functions {

    public class ThumbnailService
    {
        public void CreateOrRetrieveThumbnail(string file, string thumbnail, string thumbnailsPath, int thumbnailWidth, int thumbnailHeight)
        {
            try
            {
                if (!System.IO.File.Exists(thumbnail))
                {
                    CreateThumbnail(file, thumbnailsPath, thumbnailWidth, thumbnailHeight);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating thumbnail: {ex.Message}");
            }
        }

        private void CreateThumbnail(string file, string thumbnailsPath, int thumbnailWidth, int thumbnailHeight)
        {
            ImageHelper.CreateThumbnail(file, thumbnailsPath, thumbnailWidth, thumbnailHeight);
        }
    }
}
<style>

    #Previous {
        border: 1px solid transparent;
    }        

        #Previous:hover,
        #Previous:active,
        #Previous:focus {
            border: 1px solid black;
        }

    #Next {
        border: 1px solid transparent;
    }

        #Next:hover,
        #Next:active,
        #Next:focus {
            border: 1px solid black;
        }

    #Copy {
        border: 1px solid transparent;
    }

        #Copy:hover,
        #Copy:active,
        #Copy:focus {
            border: 1px solid black;
        }

</style>
<!-- Go to Top button -->
<button type="button" onclick="topFunction()" id="top-button" title="Go to top">Top</button>

<!-- Stores current image in Slide -->
<input title="ImageLink" hidden type="text" spellcheck="false" value="" id="imageLink">

<!-- View Container Row -->
<div class="row  mt-5 viewContainer p-0">

    <!-- Menu Column -->
    <div class="col-12 text-start pt-4 px-0">

        <!-- Menu Container -->
        <container>

            <!-- Heading Row -->
            <div class="row">

                <!-- Back Link Button -->
                <div class="col-1 ps-4 text-center d-flex">
                    <a style="height: 26px; width:36px;" href="~/KPHS68Combo" id="back">
                        <img style="height: 25px; width:24px;" src="/lib/svg/buttons/back-white.svg" alt="Home">
                    </a>
                </div>
                @* <div class="col-1 text-center d-flex">
                <a style="height: 24px; width: 36px;" asp-controller="Home" asp-action="Index" id="back">
                <img style="height: 24px; width:24px;" src="/lib/svg/buttons/back-white.svg" alt="Home">
                </a>
                </div> *@
                <!-- Heading -->
                <div class=" col-11 text-center my-2">
                    <h2 class="text-white" style="margin-left:-40px;">
                        @imagefolder
                    </h2>
                </div>

            </div>

            <!-- Gallery Links -->
            <div class="container text-center my-2">

                <!-- Folder Links -->
                <div class="mx-auto">
                    <ul class="list-unstyled d-inline-block" style="width:130px;">
                        @foreach (var folder in folders)
                        {
                            <li class="mt-2 text-start">
                                <a id="@folder-link" class="chalk-link fs-5" asp-controller="@currentController" asp-action="Gallery" asp-route-viewName="@folder">@folder</a>
                            </li>
                        }
                    </ul>
                </div>

            </div>

        </container>

    </div>

    <!-- Content Column -->
    <div class="col-12 text-start pt-4 px-0">

        <!-- Display Slideshows -->
        @if (galleryType == "Slideshows" || galleryType == "Combos")
        {
            
            <!-- Slideshow Controls -->
            <div id="my-group-1" class="row Container-fluid text-center">

                <!-- Prev -->
                <div class="col text-end p-0 m-0">
                    <button class="rounded-2" id="Previous" type="button" title="Previous image">
                        <img alt="Prev" style="width:24px; height: 26px;" src="/lib/svg/Buttons/Previous.svg"> Prev
                    </button>
                </div>

                <!-- Copy -->
                <div class="col p-0 m-0 bg-gainsboro">
                    <button class="rounded-2" id="Copy" type="button" title="Copy Link to Clipboard" tooltip="Copy this Link" onclick="copyLink()" onmouseout="copyLinkOut()">
                        <img alt="Copy" style="width:26px; height:26px;" src="~/lib/svg/Buttons/Links.svg"> Copy Link
                    </button>
                </div>

                <!-- Next -->
                <div class="col text-start p-0 m-0">
                    <button class="rounded-2" type="button" id="Next" title="Next image">
                        Next <img alt="Next" style="width:24px; height: 26px;" src="/lib/svg/Buttons/Next.svg">
                    </button>
                </div>

            </div>

            <div class="mt-1"></div>

            <!-- My Slideshow -->
            <div id="my-group-2" class="row container-fluid text-center p-0 m-0">

                <!-- Column Carousel -->
                <div class="col-12 p-0 m-0">

                    <container class="p-0 m-0">



                        <!-- Carousel Control-->
                        <div id="CarouselControl" class="carousel slide pointer-event" data-bs-ride="carousel">

                            <!-- Carousel Inner (CarouselItems) -->
                            <div id="CarouselItems" class="carousel-inner">

                                @foreach (var file in files)
                                {
                                    <div class='bg-transparent carousel-item  @(file == files.First() ? "active" : "")'>
                                        <img class='d-block bg-gray-lighter p-2'
                                             src="@Url.Content(System.IO.Path.Combine("/", galleriesFolder, galleryFolder, imagefolder, System.IO.Path.GetFileNameWithoutExtension(file) + "_thumb.jpg").Replace("\\", "/"))"
                                             alt="@System.IO.Path.GetFileNameWithoutExtension(file).Substring(0, Math.Min(30, System.IO.Path.GetFileNameWithoutExtension(file).Length))" id="CarouselImage" />
                                    </div>
                                }

                            </div>

                            <!-- Left And right controls -->
                            <a title="prev" class="carousel-control-prev" href="#CarouselControl" role="button" data-bs-slide="prev"></a>
                            <a title="next" class="carousel-control-next" href="#CarouselControl" role="button" data-bs-slide="next"></a>

                        </div>

                    </container>

                </div><!-- End Carousel Column -->
            </div>
        }

        @if (galleryType == "Galleries" || galleryType == "Combos")
        {

            <!-- The Gallery -->
            <div id="images-container" class="row g-2 g-sm-2 g-lg-2 bg-transparent" style="display: none">

                <!-- Display each Image file and filename -->
                @foreach (var file in files)
                {
                    <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-3 mb-3">

                        <!-- Link to file -->
                        <a title="Click for full-screen." class="menu-link d-block text-center bg-gray-light" href="@Url.Content(file)" target="_blank">

                            <!-- file_thumb -->
                            <img class="w-100 img-fluid mx-auto" data-src="@Url.Content(System.IO.Path.Combine("/", galleriesFolder, galleryFolder, imagefolder, System.IO.Path.GetFileNameWithoutExtension(file) + "_thumb.jpg").Replace("\\", "/"))" alt="_Click Me_" />

                            <!-- file name (max of 30 characters shown) -->
                            <div class="text-black text-center pt-1">
                                @System.IO.Path.GetFileNameWithoutExtension(file).Substring(0, Math.Min(30, System.IO.Path.GetFileNameWithoutExtension(file).Length))
                            </div>
                        </a>
                    </div>
                }
            </div>
        }

    </div>

</div>

@* <!-- Spacing for Large Screens if needed -->
<div class="gallery-view-bottom-spacing"></div> *@


<!-- Toggle the Current Menu Button to indicate it is selected -->
<script>
    var mainElement = document.getElementById("@imagefolder");
    var secondaryElement = document.getElementById("@imagefolder-link");

    @* mainElement.classList.toggle("bg-gray-lighter");
        mainElement.classList.toggle("bg-gray-dark"); *@
        mainElement.style.pointerEvents = 'none';

    @* secondaryElement.classList.toggle("text-dark");
        secondaryElement.classList.toggle("text-light"); *@
        secondaryElement.classList.add("selected");
</script>

<!-- Keep imageLink up to date each slide. -->
<script>
    $(document).ready(function () {

        $('#CarouselControl').carousel('next');

        // Get Domain
        var domain = window.location.origin;

        // Initialize the carousel
        $('#CarouselControl').on('slid.bs.carousel', function () {
            // Get the active item
            var activeItem = $(this).find('.carousel-item.active');

            // Get the image base link from the active item
            var imageBaseLink = domain + activeItem.find('img').attr('src');

            // Define the possible extensions
            var extensions = ['jpg', 'png', 'gif', 'webp', 'svg'];

            // Try to find the actual image file with the right extension
            var actualImageLink = findActualImageLink(imageBaseLink, extensions);

            // Update the value of the input field
            document.getElementById("imageLink").value = actualImageLink;
        });

        // Initialize imageLink with the first image link
        var firstImageLink = domain + $('#CarouselControl .carousel-item:first img').attr('src');
        document.getElementById("imageLink").value = findActualImageLink(firstImageLink, extensions);

        // Function to find the actual image link with the right extension
        function findActualImageLink(baseLink, extensions) {
            for (var i = 0; i < extensions.length; i++) {
                var potentialLink = baseLink.replace('_thumb.jpg', '.' + extensions[i]);
                // Check if the potential link exists, and return it if found
                if (doesFileExist(potentialLink)) {
                    return potentialLink;
                }
            }
            // If none of the extensions is found, return the original base link
            return baseLink;
        }

        // Function to check if a file exists
        async function doesFileExist(url) {
            try {
                const response = await fetch(url, { method: 'HEAD' });
                return response.ok;
            } catch (error) {
                console.error('Error checking file existence:', error);
                return false;
            }
        }

    });
</script>

<!-- Copy Image Link -->
<script>
    function copyLink() {
        const textToCopy = document.getElementById("imageLink").value;
        navigator.clipboard.writeText(textToCopy)
            .then(() => { alert(textToCopy + ` Copied!`) })
            .catch((error) => { alert(`Copy failed! ${error}`) })
    }
</script>

<!-- Image Carousel forward and backwards buttosn -->
<script>
    $('#Previous').click(function (e) {
        e.stopPropagation();
        $('#CarouselControl').carousel('prev');
        return false;
    });

    $('#Next').click(function (e) {
        e.stopPropagation();
        $('#CarouselControl').carousel('next');
        return false;
    });
</script>

